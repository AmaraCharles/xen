

const socket = io();
const peer = new Peer();
let myVideoStream;
let myId;
var videoGrid = document.getElementById('videoDiv')
var myvideo = document.createElement('video');
myvideo.muted = true;
const peerConnections = {}
navigator.mediaDevices.getUserMedia({
  video:true,
  audio:true
}).then((stream)=>{
  myVideoStream = stream;
  addVideo(myvideo , stream);
  peer.on('call' , call=>{
    call.answer(stream);
      const vid = document.createElement('video');
    call.on('stream' , userStream=>{
      addVideo(vid , userStream);
    })
    call.on('error' , (err)=>{
      alert(err)
    })
    call.on("close", () => {
        console.log(vid);
        vid.remove();
    })
    peerConnections[call.peer] = call;
  })
}).catch(err=>{
    alert(err.message)
})
peer.on('open' , (id)=>{
    myId = id;
    let idx = {
        id: id,
        ID: ID
    }

    showMessage('Now joining live chat');
  socket.emit("newUser" , idx , roomID);
})
peer.on('error' , (err)=>{
    showMessage(err.type);
});



socket.on('userJoined' , id=>{
  showMessage(id.ID + ' just joined');
  const call  = peer.call(id.id , myVideoStream);
  const vid = document.createElement('video');
  call.on('error' , (err)=>{
      showMessage(err);
  })
    call.on('stream', userStream => {
        showMessage('Connected to user');
    addVideo(vid , userStream);
  })
  call.on('close' , ()=>{
    vid.remove();
      console.log("user disconect")
      showMessage('User disconnected from live chat');
  })
  peerConnections[id.id] = call;
})
socket.on('userDisconnect' , id=>{
  if(peerConnections[id.id]){
    peerConnections[id.id].close();
  }
})
function addVideo(video , stream){
  video.srcObject = stream;
  video.addEventListener('loadedmetadata', () => {
    video.play()
  })
  videoGrid.append(video);
}

const muteButton = document.querySelector("#muteButton");
const stopVideo = document.querySelector("#stopVideo");
muteButton.addEventListener("click", () => {
    const enabled = myVideoStream.getAudioTracks()[0].enabled;
    if (enabled) {
        myVideoStream.getAudioTracks()[0].enabled = false;
        html = `<i class="fa fa-microphone-slash"></i>`;
        muteButton.classList.toggle("background__red");
        muteButton.innerHTML = html;
    } else {
        myVideoStream.getAudioTracks()[0].enabled = true;
        html = `<i class="fa fa-microphone"></i>`;
        muteButton.classList.toggle("background__red");
        muteButton.innerHTML = html;
    }
});


stopVideo.addEventListener("click", () => {
    
    const enabled = myVideoStream.getVideoTracks()[0].enabled;
    if (enabled) {
        myVideoStream.getVideoTracks()[0].enabled = false;
      //  html = `<i class="fa fa-video-slash"></i>`;
        stopVideo.classList.toggle("background__red");
        stopVideo.innerHTML = html;
     
    } else {
        myVideoStream.getVideoTracks()[0].enabled = true;
       // html = `<i class="fa fa-video"></i>`;
        stopVideo.classList.toggle("background__red");
        stopVideo.innerHTML = html;
    }
});

function showMessage(message) {
    
    document.getElementById('message').innerText = message;
    const box = document.getElementById('notifier');
    box.style.display = 'block';
    setTimeout(() => {
        
        // ??? removes element from DOM
        box.style.display = 'none';
    }, 2500);
}